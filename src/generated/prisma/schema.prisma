// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  ADMIN
  CLIENTE
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentType {
  CREDIT_CARD
  PIX
  BANK_SLIP
}

model Usuario {
  id            Int            @id @default(autoincrement())
  nome          String
  email         String         @unique
  senha         String
  cpf           String         @unique
  tipoUsuario   UserType       @default(CLIENTE)
  criadoEm      DateTime       @default(now())
  atualizadoEm  DateTime       @updatedAt
  endereco      Endereco?
  pedidos       Pedido[]
  avaliacoesEnviadas Avaliacao[]  @relation("Usuario")
  avaliacoesRevisadas Avaliacao[] @relation("Reviewer")
  refreshTokens RefreshToken[]
  twoFactorSecret      String?
  twoFactorEnabled     Boolean   @default(false)
  twoFactorBackupCodes String[]

  @@index([email])
  @@index([cpf])
  @@map("usuarios")
}

model Endereco {
  id           Int      @id @default(autoincrement())
  rua          String
  numero       String
  complemento  String?
  bairro       String
  cidade       String
  estado       String
  cep          String
  usuario      Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId    Int      @unique
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  @@map("enderecos")
}

model Produto {
  id           Int          @id @default(autoincrement())
  nome         String
  descricao    String
  preco        Float
  desconto     Float?
  marca        String
  categoria    String
  subcategoria String
  imagem       String
  imagens      String
  tamanhos     String
  estoque      Int          @default(0)
  ativo        Boolean      @default(true)
  criadoEm     DateTime     @default(now())
  atualizadoEm DateTime     @updatedAt
  avaliacoes   Avaliacao[]
  pedidoItems  PedidoItem[]

  @@index([categoria])
  @@index([subcategoria])
  @@index([marca])
  @@index([ativo])
  @@map("produtos")
}

model Avaliacao {
  id              String    @id @default(uuid())
  nota            Int
  comentario      String
  status          String    @default("PENDING") // PENDING, APPROVED, REJECTED
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  reviewedBy      String?
  reviewedAt      DateTime?
  rejectionReason String?
  produtoId       String
  usuarioId       String
  produto         Produto   @relation(fields: [produtoId], references: [id])
  usuario         Usuario   @relation(fields: [usuarioId], references: [id])
  reviewer        Usuario?  @relation("Reviewer", fields: [reviewedBy], references: [id])

  @@index([produtoId])
  @@index([usuarioId])
  @@index([reviewedBy])
}

model Pedido {
  id           Int          @id @default(autoincrement())
  status       OrderStatus  @default(PENDING)
  pagamento    PaymentType
  valorTotal   Float
  frete        Float
  data         DateTime     @default(now())
  atualizadoEm DateTime     @updatedAt
  endereco     String
  usuario      Usuario      @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId    Int
  itens        PedidoItem[]
  cupom        Cupom?       @relation(fields: [cupomId], references: [id])
  cupomId      Int?

  @@index([status])
  @@index([usuarioId])
  @@map("pedidos")
}

model PedidoItem {
  id         Int     @id @default(autoincrement())
  quantidade Int
  preco      Float
  tamanho    String
  produto    Produto @relation(fields: [produtoId], references: [id])
  produtoId  Int
  pedido     Pedido  @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
  pedidoId   Int

  @@map("pedido_items")
}

model Cupom {
  id           Int      @id @default(autoincrement())
  codigo       String   @unique
  desconto     Float
  tipo         String   @default("valor") // valor ou percentual
  valorMinimo  Float?
  expiracao    DateTime
  usado        Boolean  @default(false)
  ativo        Boolean  @default(true)
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
  pedidos      Pedido[]

  @@map("cupons")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  userId    Int
  usuario   Usuario  @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([token])
}
